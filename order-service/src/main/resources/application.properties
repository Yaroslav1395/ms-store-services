spring.application.name=MS-STORE-ORDER-SERVICE
server.port=8081

#-----------------Datasource-----------------
spring.datasource.url=jdbc:h2:file:~/store/db/order-service/ORDER_SERVICE;MODE=PostgreSQL
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driverClassName=org.h2.Driver
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true
spring.jpa.hibernate.ddl-auto=create-drop

#-------------Eureka server config---------------
eureka.client.service-url.defaultZone=http://netflix:eureka@localhost:8761/eureka
spring.cloud.discovery.enabled=true

#-------------Actuator config--------------------
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#-------------Resilinece4j config----------------
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.register-health-indicator=true
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.sliding-window-size=5
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.MS-STORE-INVENTORY-SERVICE.automatic-transition-from-open-to-half-open-enabled=true

#-------------Resilinece4j Timeout config----------
resilience4j.timelimiter.instances.MS-STORE-INVENTORY-SERVICE.timeout-duration=3s

#-------------Resilinece4j Retry config------------
resilience4j.retry.instances.MS-STORE-INVENTORY-SERVICE.max-attempts=3
resilience4j.retry.instances.MS-STORE-INVENTORY-SERVICE.wait-duration=5s

#-------------Zipkin config------------------------
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.enabled=true
management.observations.http.client.requests.enabled=true
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#-------------Kafka config-------------------------
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:sakhno.springframework.ms_store_product_service.event.OrderPlacedEvent


logging.level.org.springframework.web.reactive.function.client=DEBUG
logging.level.reactor.netty.http.client=DEBUG